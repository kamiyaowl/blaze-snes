@page "/romchecker"
@using System.IO
@using System.Collections
@using System.Collections.Generic
@using System.Linq
@using BlazeSnes.Core.Cpu
@using BlazeSnes.Core.External
@using BlazeSnes.Core.Tool
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>ROM Checker</h1>
            <p>
                Reads information from the ROM file and displays it.
                <a href="https://github.com/kamiyaowl/blaze-snes/tree/master/assets">Sample Files</a>
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col-auto">
            <input type="file" @ref=inputElement />
        </div>
        <div class="ol-auto flex-md-fill">
            <button @onclick=ReadFile class="btn btn-primary btn-sm">Read</button>
            <button @onclick=ClearFile class="btn btn-outline-primary btn-sm">Clear</button>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (!string.IsNullOrWhiteSpace(errorMessage)) {
                <div class="alert alert-danger" role="alert" style="width: 100%">
                    @errorMessage
                </div>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h2>SMC Header</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Key</th>
                        <th scope="col">Value</th>
                    </tr>
                </thead>
                <tbody>
                @if (cartridge != null) {
                    @foreach (var p in cartridge.GetType().GetProperties()) {
                        <tr>
                            <td>@p.Name</td>
                            <td>@p.GetValue(cartridge)</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-12">
        <h2>Disassemble</h2>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Addr(System)</th>
                    <th scope="col">Addr(Binary)</th>
                    <th scope="col">Instruction</th>
                    <th scope="col">Addressing</th>
                    <th scope="col">Cycles</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (opcode, args, sysAddr, binAddr) in disasmList) {
                    <tr>
                        <td>@sysAddr.ToString("X08")</td>
                        <td>@binAddr.ToString("X08")</td>
                        <td>@($"{opcode.Inst}({opcode.Code:X02})")</td>
                        <td>
                            @opcode.AddressingMode
                            @if (args.Length > 0) {
                                @("(" + string.Join(",", args.Select(x => x.ToString("X02"))) + ")")
                            }
                        </td>
                        <td>@opcode.Cycles</td>
                    </tr>
                }
                <tr>
                    @if (cartridge != null) {
                        <td colspan="6">
                            <button @onclick=Disassemble class="btn btn-info" style="width:100%">
                                more...
                                @($"{disasmOffset} ~ {disasmOffset+NUM_OF_DISASM_ENTRY}")
                            </button>
                        </td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
</div>

@code {
    // 一度にDisasmする量
    readonly int NUM_OF_DISASM_ENTRY = 20;
    // Input要素
    ElementReference inputElement;
    // エラーメッセージ
    string errorMessage;

    // 読み込んだカセット
    Cartridge cartridge;
    // 展開したDisassembler(Opcode, args, sysAddr, binAddr)
    List<(OpCode, byte[], uint, uint)> disasmList = new List<(OpCode, byte[], uint, uint)>();
    // 展開済byte数
    int disasmOffset = 0;
    // 展開データソース
    IEnumerable<(OpCode, byte[], uint, uint)> disasmSrc = Enumerable.Empty<(OpCode, byte[], uint, uint)>();

    // 内部情報をクリアします
    private void Clear() {
        this.cartridge = null;
        this.errorMessage = "";
        this.disasmList.Clear();
        this.disasmOffset = 0;
        this.disasmSrc = Enumerable.Empty<(OpCode, byte[], uint, uint)>();
    }

    public async Task ClearFile() {
        await fileReaderService.CreateReference(inputElement).ClearValue();
        // 内部情報も消しておく
        this.Clear();
    }

    public async Task ReadFile() {
        // 内部情報も消しておく
        this.Clear();

        // 選択されたファイル一覧を取得
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync()).ToList();
        if (files.Count == 0) {
            this.errorMessage = "no files.";
            return;
        }
        // 先頭のファイルを使う
        var file = files[0];
        var fileInfo = await file.ReadFileInfoAsync();
        // ファイル開いてがんばる
        using(var fs = await file.OpenReadAsync()) {
            // AsyncDisposableStreamそのままだとSeekできないのでMemoryStreamに載せ替え
            var buf = new byte[fileInfo.Size];
            await fs.ReadAsync(buf, 0, buf.Length);
            using(var ms = new MemoryStream(buf)) {
                try {
                    this.cartridge = new Cartridge(ms);
                } catch (Exception ex) {
                    this.errorMessage = $"Error: {fileInfo.Name}({fileInfo.Size}byte)\n{ex.Message}";
                    this.StateHasChanged();
                    return;
                }
            }
        }
        // Disassembleのデータソースも作る
        var c = new CpuRegister();
        c.Reset();
        this.disasmSrc = this.cartridge.Disassemble(c);
        // cartridgeの更新をUIに反映させたい
        this.StateHasChanged(); // TODO: Key,Valueをペアで出す機能、他で使うなら切り出しても良いかと
        // Disassembleも1回ぐらい読んでおく
        this.Disassemble();
    }

    public void Disassemble() {
        // 指定数展開する
        try {
            foreach(var src in this.disasmSrc.Skip(this.disasmOffset).Take(NUM_OF_DISASM_ENTRY)) {
                this.disasmList.Add(src);
            }
        } catch (Exception ex) {
            Console.WriteLine(ex);
            this.errorMessage = ex.Message;
        } finally {
            // 進めた数を控えておく
            this.disasmOffset += NUM_OF_DISASM_ENTRY;
            // UI に反映
            this.StateHasChanged();
        }
    }
}
