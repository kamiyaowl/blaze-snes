@page "/romchecker"
@using System.IO
@using BlazeSnes.Core.External
@inject IFileReaderService fileReaderService
@inject IJSRuntime CurrentJSRuntime

<h1>ROM Checker</h1>

<input type="file" @ref=inputElement />
<button @onclick=ReadFile class="btn btn-primary btn-sm">Read</button>
<button @onclick=ClearFile class="btn btn-outline-primary btn-sm">Clear</button>

@if (!string.IsNullOrWhiteSpace(errorMessage)) {
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (cartridge != null) {
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Key</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in cartridge.GetType().GetProperties()) {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.GetValue(cartridge)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    ElementReference inputElement;
    Cartridge cartridge;
    string errorMessage;

    public async Task ClearFile() {
        await fileReaderService.CreateReference(inputElement).ClearValue();
    }

    public async Task ReadFile() {
        // 内部情報をクリア
        this.cartridge = null;
        this.errorMessage = "";
        // 選択されたファイル一覧を取得
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync()).ToList();
        if (files.Count == 0) {
            this.errorMessage = "no files.";
            return;
        }
        // 先頭のファイルを使う
        var file = files[0];
        var fileInfo = await file.ReadFileInfoAsync();
        // ファイル開いてがんばる
        using(var fs = await file.OpenReadAsync()) {
            // AsyncDisposableStreamそのままだとSeekできないのでMemoryStreamに載せ替え
            var buf = new byte[fileInfo.Size];
            await fs.ReadAsync(buf, 0, buf.Length);
            using(var ms = new MemoryStream(buf)) {
                try {
                    this.cartridge = new Cartridge(ms);
                } catch (Exception ex) {
                    this.errorMessage = $"Error: {fileInfo.Name}({fileInfo.Size}byte)\n{ex.Message}";
                    this.StateHasChanged();
                    return;
                }
            }
        }
        // cartridgeの更新をUIに反映させたい
        this.StateHasChanged(); // TODO: Key,Valueをペアで出す機能、他で使うなら切り出しても良いかと
    }
}
