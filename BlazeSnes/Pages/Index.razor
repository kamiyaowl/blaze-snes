@page "/"
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IJSRuntime CurrentJSRuntime

<Jumbotron Margin="Margin.Is4.FromBottom" Background="Background.Primary">
    <JumbotronTitle Size="JumbotronTitleSize.Is4">BlazeSnes</JumbotronTitle>
    <JumbotronSubtitle>
        Super Nintendo Entertainment System Emulator written in C#.
    </JumbotronSubtitle>
</Jumbotron>

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>
                    @(cartridge?.GameTitle ?? "No file selected.")
                </CardTitle>
            </CardHeader>
            <CardBody>
                <Tooltip Text='@($"Display Size: {canvasWidth}x{canvasHeight}")'>
                    <Slider Color="Primary" TValue="float" Min="1.0f" Max="5.0f" Step="0.1f" ValueChanged="@((e) => ChangeCanvasSize(e))"/>
                </Tooltip>
                <BECanvas Width="@canvasWidth" Height="@canvasHeight" @ref="canvasReference"></BECanvas>
            </CardBody>
        </Card>
    </Column>
</Row>

@if (isVisibleCpuDebug) {
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        Register Viewer
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        Variable Watcher
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        CPU Debugger
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

@if (isVisiblePpuDebug) {
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        Asset Viewer
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        BG Viewer
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        Sprite Viewer
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        Mode 7 Viewer
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                    <CardText>
                        Affine transformations debugger.
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

@if (isVisiblePpuDebug) {
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        SPC7000 Register
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        SPC7000 Debugger
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        Wave Viewer
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>
                        TODO:
                    </CardText>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

<Row>
    <Column>
        <Card Margin="Margin.Is4.FromBottom">
            <CardHeader>
                <CardTitle>ROM Select</CardTitle>
            </CardHeader>
            <CardBody>
                <FileEdit type="file" Changed="ReadFile"/>
                <CardText>
                    No files will be uploaded.
                    <Link To="https://github.com/kamiyaowl/blaze-snes/tree/master/assets">
                        Sample Files
                    </Link>
                </CardText>
            </CardBody>
        </Card>
    </Column>
</Row>

@if (isVisibleRomDebug) {
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        ROM Info
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <RomInfo Cartridge="cartridge"></RomInfo>
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromBottom">
                <CardHeader>
                    <CardTitle>
                        ROM Disassemble
                        <Badge Color="Color.Secondary">Debug</Badge>
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <RomDisassembler Cartridge="cartridge"></RomDisassembler>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>
                    Debug Switch
                </CardTitle>
            </CardHeader>
            <CardBody>
                <Button Color="Color.Primary" Clicked="@(() => ToggleVisibleDebugFlags(true))">Enable All</Button>
                <Button Clicked="@(() => ToggleVisibleDebugFlags(false))">Disable All</Button>
                <Check TValue="bool" @bind-Checked="isVisibleCpuDebug">CPU</Check>
                <Check TValue="bool" @bind-Checked="isVisiblePpuDebug">PPU</Check>
                <Check TValue="bool" @bind-Checked="isVisibleApuDebug">APU</Check>
                <Check TValue="bool" @bind-Checked="isVisibleRomDebug">ROM</Check>
                <CardText>
                    More information can be displayed, but performance may be slower.
                </CardText>
            </CardBody>
        </Card>
    </Column>
</Row>

<Row>
    <Paragraph Margin="Margin.IsAuto">
        Copyright © 2020 <Link To="https://github.com/kamiyaowl/blaze-snes">kamiyaowl/blaze-snes</Link>. All Rights Reserved
    </Paragraph>
</Row>

<Snackbar @ref="snackbar">
  <SnackbarBody>
    @snackbarMessage
  </SnackbarBody>
</Snackbar>

@code {
    // canvas関連
    readonly int BASE_WIDTH = 256;
    readonly int BASE_HEIGHT = 224;
    int canvasWidth = 256;
    int canvasHeight = 224;
    Canvas2DContext context;
    BECanvasComponent canvasReference;
    // snackbarでのメッセージ表示
    Snackbar snackbar;
    string snackbarMessage;

    // デバッガ表示フラグ
    // TODO: 最終的にはDefault Disableにする
    bool isVisibleCpuDebug = true;
    bool isVisiblePpuDebug = false;
    bool isVisibleApuDebug = false;
    bool isVisibleRomDebug = true;

    // 読み込んだカセット
    Cartridge cartridge;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        // 初期霞なら不要
        if (!firstRender) return;
        // 初期化
        this.context = await this.canvasReference.CreateCanvas2DAsync();

        await this.context.SetFillStyleAsync("black");
        await this.context.FillRectAsync(0, 0, canvasWidth, canvasHeight);
    }

    private void ChangeCanvasSize(float ratio) {
        this.canvasWidth  = (int)(ratio * BASE_WIDTH);
        this.canvasHeight = (int)(ratio * BASE_HEIGHT);
    }

    /// SnackBarを表示します
    private void ShowSnackBar(SnackbarColor color, string text) {
        this.snackbarMessage = text;
        this.snackbar.Color = color;
        this.snackbar.Show();
    }

    /// デバッグ用UIの表示を一括で切り替えます
    private void ToggleVisibleDebugFlags(bool isVisible) {
        this.isVisibleCpuDebug = isVisible;
        this.isVisiblePpuDebug = isVisible;
        this.isVisibleApuDebug = isVisible;
        this.isVisibleRomDebug = isVisible;
    }

    // 内部情報をクリアします
    private void Clear() {
        this.cartridge = null;
        // TODO: エミュレータ本体のリセット等
    }

    public void ClearFile() {
        // 内部情報も消しておく
        this.Clear();
    }

    public async Task ReadFile(FileChangedEventArgs e) {
        // 内部情報も消しておく
        this.Clear();

        // 選択されたファイル一覧を取得
        var file = e.Files.FirstOrDefault();
        if (file == null) {
            ShowSnackBar(SnackbarColor.Danger, "no files");
            return;
        }
        // AsyncDisposableStreamそのままだとSeekできないのでMemoryStreamに載せ替え
        using(var ms = new System.IO.MemoryStream()) {
            try {
                // file->memorystream
                await file.WriteToStreamAsync(ms);
                // memorystream->cartridge parse
                ms.Seek(0, System.IO.SeekOrigin.Begin);
                this.cartridge = new Cartridge(ms);
            } catch (Exception ex) {
                ShowSnackBar(SnackbarColor.Danger, $"{ex.Message}: {file.Name}({file.Size})");
                return;
            }
        }
        // cartridgeの更新をUIに反映させたい
        this.StateHasChanged();
        ShowSnackBar(SnackbarColor.Success, $"Success: Read {this.cartridge.GameTitle}");
    }
}
